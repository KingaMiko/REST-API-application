{"version":3,"names":["_getJestObj","mock","jest","require","loginUser","usersRepo","bcrypt","jwt","describe","it","findUserByEmail","mockResolvedValue","_id","email","password","subscription","avatarURL","compare","sign","mockReturnValue","req","body","res","status","fn","mockReturnThis","json","next","expect","toHaveBeenCalledWith","token","user","objectContaining"],"sources":["loginUser.test.js"],"sourcesContent":["import { loginUser } from \"#controllers/users/loginUser.js\";\nimport * as usersRepo from \"#repository/users/usersRepository.js\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\n\njest.mock(\"#repository/users/usersRepository.js\");\njest.mock(\"bcrypt\");\njest.mock(\"jsonwebtoken\");\n\ndescribe(\"Login User Controller\", () => {\n  it(\"should return status code 200 and a token on successful login\", async () => {\n    usersRepo.findUserByEmail.mockResolvedValue({\n      _id: \"123\",\n      email: \"test@example.com\",\n      password: \"hashedpassword\",\n      subscription: \"starter\",\n      avatarURL: \"url\",\n    });\n    bcrypt.compare.mockResolvedValue(true);\n    jwt.sign.mockReturnValue(\"mocked_token\");\n\n    const req = {\n      body: { email: \"test@example.com\", password: \"password123\" },\n    };\n    const res = { status: jest.fn().mockReturnThis(), json: jest.fn() };\n    const next = jest.fn();\n\n    await loginUser(req, res, next);\n\n    expect(res.status).toHaveBeenCalledWith(200);\n    expect(res.json).toHaveBeenCalledWith({\n      token: \"mocked_token\",\n      user: expect.objectContaining({\n        email: \"test@example.com\",\n        subscription: \"starter\",\n        avatarURL: \"url\",\n      }),\n    });\n  });\n});\n"],"mappings":"AAKAA,WAAA,GAAKC,IAAI,CAAC,sCAAsC,CAAC;AACjDD,WAAA,GAAKC,IAAI,CAAC,QAAQ,CAAC;AACnBD,WAAA,GAAKC,IAAI,CAAC,cAAc,CAAC;AAAC,SAAAD,YAAA;EAAA;IAAAE;EAAA,IAAAC,OAAA;EAAAH,WAAA,GAAAA,CAAA,KAAAE,IAAA;EAAA,OAAAA,IAAA;AAAA;AAP1B,SAASE,SAAS,QAAQ,iCAAiC;AAC3D,OAAO,KAAKC,SAAS,MAAM,sCAAsC;AACjE,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,GAAG,MAAM,cAAc;AAM9BC,QAAQ,CAAC,uBAAuB,EAAE,MAAM;EACtCC,EAAE,CAAC,+DAA+D,EAAE,YAAY;IAC9EJ,SAAS,CAACK,eAAe,CAACC,iBAAiB,CAAC;MAC1CC,GAAG,EAAE,KAAK;MACVC,KAAK,EAAE,kBAAkB;MACzBC,QAAQ,EAAE,gBAAgB;MAC1BC,YAAY,EAAE,SAAS;MACvBC,SAAS,EAAE;IACb,CAAC,CAAC;IACFV,MAAM,CAACW,OAAO,CAACN,iBAAiB,CAAC,IAAI,CAAC;IACtCJ,GAAG,CAACW,IAAI,CAACC,eAAe,CAAC,cAAc,CAAC;IAExC,MAAMC,GAAG,GAAG;MACVC,IAAI,EAAE;QAAER,KAAK,EAAE,kBAAkB;QAAEC,QAAQ,EAAE;MAAc;IAC7D,CAAC;IACD,MAAMQ,GAAG,GAAG;MAAEC,MAAM,EAAErB,IAAI,CAACsB,EAAE,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC;MAAEC,IAAI,EAAExB,IAAI,CAACsB,EAAE,CAAC;IAAE,CAAC;IACnE,MAAMG,IAAI,GAAGzB,IAAI,CAACsB,EAAE,CAAC,CAAC;IAEtB,MAAMpB,SAAS,CAACgB,GAAG,EAAEE,GAAG,EAAEK,IAAI,CAAC;IAE/BC,MAAM,CAACN,GAAG,CAACC,MAAM,CAAC,CAACM,oBAAoB,CAAC,GAAG,CAAC;IAC5CD,MAAM,CAACN,GAAG,CAACI,IAAI,CAAC,CAACG,oBAAoB,CAAC;MACpCC,KAAK,EAAE,cAAc;MACrBC,IAAI,EAAEH,MAAM,CAACI,gBAAgB,CAAC;QAC5BnB,KAAK,EAAE,kBAAkB;QACzBE,YAAY,EAAE,SAAS;QACvBC,SAAS,EAAE;MACb,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"}