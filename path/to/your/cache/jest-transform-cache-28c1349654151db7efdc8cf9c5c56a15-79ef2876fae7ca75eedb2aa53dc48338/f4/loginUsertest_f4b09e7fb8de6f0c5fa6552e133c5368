ffc6a90bdbba2de44375c84c422ec281
_getJestObj().mock("#repository/users/usersRepository.js");
_getJestObj().mock("bcrypt");
_getJestObj().mock("jsonwebtoken");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
import { loginUser } from "#controllers/users/loginUser.js";
import * as usersRepo from "#repository/users/usersRepository.js";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
describe("Login User Controller", () => {
  it("should return status code 200 and a token on successful login", async () => {
    usersRepo.findUserByEmail.mockResolvedValue({
      _id: "123",
      email: "test@example.com",
      password: "hashedpassword",
      subscription: "starter",
      avatarURL: "url"
    });
    bcrypt.compare.mockResolvedValue(true);
    jwt.sign.mockReturnValue("mocked_token");
    const req = {
      body: {
        email: "test@example.com",
        password: "password123"
      }
    };
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn()
    };
    const next = jest.fn();
    await loginUser(req, res, next);
    expect(res.status).toHaveBeenCalledWith(200);
    expect(res.json).toHaveBeenCalledWith({
      token: "mocked_token",
      user: expect.objectContaining({
        email: "test@example.com",
        subscription: "starter",
        avatarURL: "url"
      })
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJqZXN0IiwicmVxdWlyZSIsImxvZ2luVXNlciIsInVzZXJzUmVwbyIsImJjcnlwdCIsImp3dCIsImRlc2NyaWJlIiwiaXQiLCJmaW5kVXNlckJ5RW1haWwiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsIl9pZCIsImVtYWlsIiwicGFzc3dvcmQiLCJzdWJzY3JpcHRpb24iLCJhdmF0YXJVUkwiLCJjb21wYXJlIiwic2lnbiIsIm1vY2tSZXR1cm5WYWx1ZSIsInJlcSIsImJvZHkiLCJyZXMiLCJzdGF0dXMiLCJmbiIsIm1vY2tSZXR1cm5UaGlzIiwianNvbiIsIm5leHQiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInRva2VuIiwidXNlciIsIm9iamVjdENvbnRhaW5pbmciXSwic291cmNlcyI6WyJsb2dpblVzZXIudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2dpblVzZXIgfSBmcm9tIFwiI2NvbnRyb2xsZXJzL3VzZXJzL2xvZ2luVXNlci5qc1wiO1xuaW1wb3J0ICogYXMgdXNlcnNSZXBvIGZyb20gXCIjcmVwb3NpdG9yeS91c2Vycy91c2Vyc1JlcG9zaXRvcnkuanNcIjtcbmltcG9ydCBiY3J5cHQgZnJvbSBcImJjcnlwdFwiO1xuaW1wb3J0IGp3dCBmcm9tIFwianNvbndlYnRva2VuXCI7XG5cbmplc3QubW9jayhcIiNyZXBvc2l0b3J5L3VzZXJzL3VzZXJzUmVwb3NpdG9yeS5qc1wiKTtcbmplc3QubW9jayhcImJjcnlwdFwiKTtcbmplc3QubW9jayhcImpzb253ZWJ0b2tlblwiKTtcblxuZGVzY3JpYmUoXCJMb2dpbiBVc2VyIENvbnRyb2xsZXJcIiwgKCkgPT4ge1xuICBpdChcInNob3VsZCByZXR1cm4gc3RhdHVzIGNvZGUgMjAwIGFuZCBhIHRva2VuIG9uIHN1Y2Nlc3NmdWwgbG9naW5cIiwgYXN5bmMgKCkgPT4ge1xuICAgIHVzZXJzUmVwby5maW5kVXNlckJ5RW1haWwubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgX2lkOiBcIjEyM1wiLFxuICAgICAgZW1haWw6IFwidGVzdEBleGFtcGxlLmNvbVwiLFxuICAgICAgcGFzc3dvcmQ6IFwiaGFzaGVkcGFzc3dvcmRcIixcbiAgICAgIHN1YnNjcmlwdGlvbjogXCJzdGFydGVyXCIsXG4gICAgICBhdmF0YXJVUkw6IFwidXJsXCIsXG4gICAgfSk7XG4gICAgYmNyeXB0LmNvbXBhcmUubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSk7XG4gICAgand0LnNpZ24ubW9ja1JldHVyblZhbHVlKFwibW9ja2VkX3Rva2VuXCIpO1xuXG4gICAgY29uc3QgcmVxID0ge1xuICAgICAgYm9keTogeyBlbWFpbDogXCJ0ZXN0QGV4YW1wbGUuY29tXCIsIHBhc3N3b3JkOiBcInBhc3N3b3JkMTIzXCIgfSxcbiAgICB9O1xuICAgIGNvbnN0IHJlcyA9IHsgc3RhdHVzOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSwganNvbjogamVzdC5mbigpIH07XG4gICAgY29uc3QgbmV4dCA9IGplc3QuZm4oKTtcblxuICAgIGF3YWl0IGxvZ2luVXNlcihyZXEsIHJlcywgbmV4dCk7XG5cbiAgICBleHBlY3QocmVzLnN0YXR1cykudG9IYXZlQmVlbkNhbGxlZFdpdGgoMjAwKTtcbiAgICBleHBlY3QocmVzLmpzb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgIHRva2VuOiBcIm1vY2tlZF90b2tlblwiLFxuICAgICAgdXNlcjogZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICBlbWFpbDogXCJ0ZXN0QGV4YW1wbGUuY29tXCIsXG4gICAgICAgIHN1YnNjcmlwdGlvbjogXCJzdGFydGVyXCIsXG4gICAgICAgIGF2YXRhclVSTDogXCJ1cmxcIixcbiAgICAgIH0pLFxuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFLQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsc0NBQXNDLENBQUM7QUFDakRELFdBQUEsR0FBS0MsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUNuQkQsV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxDQUFDO0FBQUMsU0FBQUQsWUFBQTtFQUFBO0lBQUFFO0VBQUEsSUFBQUMsT0FBQTtFQUFBSCxXQUFBLEdBQUFBLENBQUEsS0FBQUUsSUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQVAxQixTQUFTRSxTQUFTLFFBQVEsaUNBQWlDO0FBQzNELE9BQU8sS0FBS0MsU0FBUyxNQUFNLHNDQUFzQztBQUNqRSxPQUFPQyxNQUFNLE1BQU0sUUFBUTtBQUMzQixPQUFPQyxHQUFHLE1BQU0sY0FBYztBQU05QkMsUUFBUSxDQUFDLHVCQUF1QixFQUFFLE1BQU07RUFDdENDLEVBQUUsQ0FBQywrREFBK0QsRUFBRSxZQUFZO0lBQzlFSixTQUFTLENBQUNLLGVBQWUsQ0FBQ0MsaUJBQWlCLENBQUM7TUFDMUNDLEdBQUcsRUFBRSxLQUFLO01BQ1ZDLEtBQUssRUFBRSxrQkFBa0I7TUFDekJDLFFBQVEsRUFBRSxnQkFBZ0I7TUFDMUJDLFlBQVksRUFBRSxTQUFTO01BQ3ZCQyxTQUFTLEVBQUU7SUFDYixDQUFDLENBQUM7SUFDRlYsTUFBTSxDQUFDVyxPQUFPLENBQUNOLGlCQUFpQixDQUFDLElBQUksQ0FBQztJQUN0Q0osR0FBRyxDQUFDVyxJQUFJLENBQUNDLGVBQWUsQ0FBQyxjQUFjLENBQUM7SUFFeEMsTUFBTUMsR0FBRyxHQUFHO01BQ1ZDLElBQUksRUFBRTtRQUFFUixLQUFLLEVBQUUsa0JBQWtCO1FBQUVDLFFBQVEsRUFBRTtNQUFjO0lBQzdELENBQUM7SUFDRCxNQUFNUSxHQUFHLEdBQUc7TUFBRUMsTUFBTSxFQUFFckIsSUFBSSxDQUFDc0IsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsY0FBYyxDQUFDLENBQUM7TUFBRUMsSUFBSSxFQUFFeEIsSUFBSSxDQUFDc0IsRUFBRSxDQUFDO0lBQUUsQ0FBQztJQUNuRSxNQUFNRyxJQUFJLEdBQUd6QixJQUFJLENBQUNzQixFQUFFLENBQUMsQ0FBQztJQUV0QixNQUFNcEIsU0FBUyxDQUFDZ0IsR0FBRyxFQUFFRSxHQUFHLEVBQUVLLElBQUksQ0FBQztJQUUvQkMsTUFBTSxDQUFDTixHQUFHLENBQUNDLE1BQU0sQ0FBQyxDQUFDTSxvQkFBb0IsQ0FBQyxHQUFHLENBQUM7SUFDNUNELE1BQU0sQ0FBQ04sR0FBRyxDQUFDSSxJQUFJLENBQUMsQ0FBQ0csb0JBQW9CLENBQUM7TUFDcENDLEtBQUssRUFBRSxjQUFjO01BQ3JCQyxJQUFJLEVBQUVILE1BQU0sQ0FBQ0ksZ0JBQWdCLENBQUM7UUFDNUJuQixLQUFLLEVBQUUsa0JBQWtCO1FBQ3pCRSxZQUFZLEVBQUUsU0FBUztRQUN2QkMsU0FBUyxFQUFFO01BQ2IsQ0FBQztJQUNILENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9