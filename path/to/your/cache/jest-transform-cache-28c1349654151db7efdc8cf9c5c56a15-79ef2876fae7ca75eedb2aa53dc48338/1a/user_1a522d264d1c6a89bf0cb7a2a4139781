71a4ab1b3b354c76fe7051e226f8d55e
/* istanbul ignore next */
function cov_pdh2daflc() {
  var path = "/Users/kinga/Documents/GOIT/github/Node/nodejs-project/models/user.js";
  var hash = "269b64e691c93ff40346ccbaae3a27868d2877e3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kinga/Documents/GOIT/github/Node/nodejs-project/models/user.js",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 19
        },
        end: {
          line: 29,
          column: 1
        }
      },
      "1": {
        start: {
          line: 31,
          column: 13
        },
        end: {
          line: 31,
          column: 38
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0
    },
    f: {},
    b: {},
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "269b64e691c93ff40346ccbaae3a27868d2877e3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_pdh2daflc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_pdh2daflc();
import { Schema, model } from "mongoose";
const userSchema =
/* istanbul ignore next */
(cov_pdh2daflc().s[0]++, Schema({
  password: {
    type: String,
    required: [true, "Password is required"]
  },
  email: {
    type: String,
    required: [true, "Email is required"],
    unique: true
  },
  subscription: {
    type: String,
    enum: ["starter", "pro", "business"],
    default: "starter"
  },
  token: {
    type: String,
    default: null
  },
  avatarURL: {
    type: String,
    required: true
  }
}, {
  versionKey: false,
  timestamps: true
}));
const User =
/* istanbul ignore next */
(cov_pdh2daflc().s[1]++, model("user", userSchema));
export default User;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfcGRoMmRhZmxjIiwiYWN0dWFsQ292ZXJhZ2UiLCJTY2hlbWEiLCJtb2RlbCIsInVzZXJTY2hlbWEiLCJzIiwicGFzc3dvcmQiLCJ0eXBlIiwiU3RyaW5nIiwicmVxdWlyZWQiLCJlbWFpbCIsInVuaXF1ZSIsInN1YnNjcmlwdGlvbiIsImVudW0iLCJkZWZhdWx0IiwidG9rZW4iLCJhdmF0YXJVUkwiLCJ2ZXJzaW9uS2V5IiwidGltZXN0YW1wcyIsIlVzZXIiXSwic291cmNlcyI6WyJ1c2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNjaGVtYSwgbW9kZWwgfSBmcm9tIFwibW9uZ29vc2VcIjtcblxuY29uc3QgdXNlclNjaGVtYSA9IFNjaGVtYShcbiAge1xuICAgIHBhc3N3b3JkOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogW3RydWUsIFwiUGFzc3dvcmQgaXMgcmVxdWlyZWRcIl0sXG4gICAgfSxcbiAgICBlbWFpbDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6IFt0cnVlLCBcIkVtYWlsIGlzIHJlcXVpcmVkXCJdLFxuICAgICAgdW5pcXVlOiB0cnVlLFxuICAgIH0sXG4gICAgc3Vic2NyaXB0aW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBlbnVtOiBbXCJzdGFydGVyXCIsIFwicHJvXCIsIFwiYnVzaW5lc3NcIl0sXG4gICAgICBkZWZhdWx0OiBcInN0YXJ0ZXJcIixcbiAgICB9LFxuICAgIHRva2VuOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgYXZhdGFyVVJMOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB9LFxuICB9LFxuICB7IHZlcnNpb25LZXk6IGZhbHNlLCB0aW1lc3RhbXBzOiB0cnVlIH1cbik7XG5cbmNvbnN0IFVzZXIgPSBtb2RlbChcInVzZXJcIiwgdXNlclNjaGVtYSk7XG5cbmV4cG9ydCBkZWZhdWx0IFVzZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWVZO0lBQUFBLGFBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGFBQUE7QUFmWixTQUFTRSxNQUFNLEVBQUVDLEtBQUssUUFBUSxVQUFVO0FBRXhDLE1BQU1DLFVBQVU7QUFBQTtBQUFBLENBQUFKLGFBQUEsR0FBQUssQ0FBQSxPQUFHSCxNQUFNLENBQ3ZCO0VBQ0VJLFFBQVEsRUFBRTtJQUNSQyxJQUFJLEVBQUVDLE1BQU07SUFDWkMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLHNCQUFzQjtFQUN6QyxDQUFDO0VBQ0RDLEtBQUssRUFBRTtJQUNMSCxJQUFJLEVBQUVDLE1BQU07SUFDWkMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLG1CQUFtQixDQUFDO0lBQ3JDRSxNQUFNLEVBQUU7RUFDVixDQUFDO0VBQ0RDLFlBQVksRUFBRTtJQUNaTCxJQUFJLEVBQUVDLE1BQU07SUFDWkssSUFBSSxFQUFFLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUM7SUFDcENDLE9BQU8sRUFBRTtFQUNYLENBQUM7RUFDREMsS0FBSyxFQUFFO0lBQ0xSLElBQUksRUFBRUMsTUFBTTtJQUNaTSxPQUFPLEVBQUU7RUFDWCxDQUFDO0VBQ0RFLFNBQVMsRUFBRTtJQUNUVCxJQUFJLEVBQUVDLE1BQU07SUFDWkMsUUFBUSxFQUFFO0VBQ1o7QUFDRixDQUFDLEVBQ0Q7RUFBRVEsVUFBVSxFQUFFLEtBQUs7RUFBRUMsVUFBVSxFQUFFO0FBQUssQ0FDeEMsQ0FBQztBQUVELE1BQU1DLElBQUk7QUFBQTtBQUFBLENBQUFuQixhQUFBLEdBQUFLLENBQUEsT0FBR0YsS0FBSyxDQUFDLE1BQU0sRUFBRUMsVUFBVSxDQUFDO0FBRXRDLGVBQWVlLElBQUkifQ==