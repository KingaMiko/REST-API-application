a229b60277d14f0dd69a180f0ff320ef
/* istanbul ignore next */
function cov_13l7mrr97h() {
  var path = "/Users/kinga/Documents/GOIT/github/Node/nodejs-project/middlewares/errorHandler.js";
  var hash = "304aad426c1f27599e6e8dbdd4862486409ff864";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kinga/Documents/GOIT/github/Node/nodejs-project/middlewares/errorHandler.js",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 12
        }
      },
      "1": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 4,
          column: 33
        }
      },
      "2": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 27
        }
      },
      "3": {
        start: {
          line: 9,
          column: 20
        },
        end: {
          line: 17,
          column: 1
        }
      },
      "4": {
        start: {
          line: 11,
          column: 40
        },
        end: {
          line: 11,
          column: 43
        }
      },
      "5": {
        start: {
          line: 12,
          column: 2
        },
        end: {
          line: 16,
          column: 5
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 2,
            column: 3
          }
        },
        loc: {
          start: {
            line: 2,
            column: 35
          },
          end: {
            line: 6,
            column: 3
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 20
          },
          end: {
            line: 9,
            column: 21
          }
        },
        loc: {
          start: {
            line: 9,
            column: 50
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 9
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 10
          },
          end: {
            line: 11,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 23
          },
          end: {
            line: 11,
            column: 26
          }
        }],
        line: 11
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "304aad426c1f27599e6e8dbdd4862486409ff864"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_13l7mrr97h = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_13l7mrr97h();
class ErrorHandler extends Error {
  constructor(statusCode, message) {
    /* istanbul ignore next */
    cov_13l7mrr97h().f[0]++;
    cov_13l7mrr97h().s[0]++;
    super();
    /* istanbul ignore next */
    cov_13l7mrr97h().s[1]++;
    this.statusCode = statusCode;
    /* istanbul ignore next */
    cov_13l7mrr97h().s[2]++;
    this.message = message;
  }
}
/* istanbul ignore next */
cov_13l7mrr97h().s[3]++;
const handleError = (err, req, res /* next */) => {
  /* istanbul ignore next */
  cov_13l7mrr97h().f[1]++;
  // eslint-disable-line no-unused-vars
  const {
    statusCode =
    /* istanbul ignore next */
    (cov_13l7mrr97h().b[0][0]++, 500),
    message
  } =
  /* istanbul ignore next */
  (cov_13l7mrr97h().s[4]++, err);
  /* istanbul ignore next */
  cov_13l7mrr97h().s[5]++;
  res.status(statusCode).json({
    status: "error",
    statusCode,
    message
  });
};
export { ErrorHandler, handleError };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTNsN21ycjk3aCIsImFjdHVhbENvdmVyYWdlIiwiRXJyb3JIYW5kbGVyIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInN0YXR1c0NvZGUiLCJtZXNzYWdlIiwiZiIsInMiLCJoYW5kbGVFcnJvciIsImVyciIsInJlcSIsInJlcyIsImIiLCJzdGF0dXMiLCJqc29uIl0sInNvdXJjZXMiOlsiZXJyb3JIYW5kbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEVycm9ySGFuZGxlciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3Ioc3RhdHVzQ29kZSwgbWVzc2FnZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB9XG59XG5cbmNvbnN0IGhhbmRsZUVycm9yID0gKGVyciwgcmVxLCByZXMgLyogbmV4dCAqLykgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIGNvbnN0IHsgc3RhdHVzQ29kZSA9IDUwMCwgbWVzc2FnZSB9ID0gZXJyO1xuICByZXMuc3RhdHVzKHN0YXR1c0NvZGUpLmpzb24oe1xuICAgIHN0YXR1czogXCJlcnJvclwiLFxuICAgIHN0YXR1c0NvZGUsXG4gICAgbWVzc2FnZSxcbiAgfSk7XG59O1xuXG5leHBvcnQgeyBFcnJvckhhbmRsZXIsIGhhbmRsZUVycm9yIH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWVZO0lBQUFBLGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGNBQUE7QUFmWixNQUFNRSxZQUFZLFNBQVNDLEtBQUssQ0FBQztFQUMvQkMsV0FBV0EsQ0FBQ0MsVUFBVSxFQUFFQyxPQUFPLEVBQUU7SUFBQTtJQUFBTixjQUFBLEdBQUFPLENBQUE7SUFBQVAsY0FBQSxHQUFBUSxDQUFBO0lBQy9CLEtBQUssQ0FBQyxDQUFDO0lBQUM7SUFBQVIsY0FBQSxHQUFBUSxDQUFBO0lBQ1IsSUFBSSxDQUFDSCxVQUFVLEdBQUdBLFVBQVU7SUFBQztJQUFBTCxjQUFBLEdBQUFRLENBQUE7SUFDN0IsSUFBSSxDQUFDRixPQUFPLEdBQUdBLE9BQU87RUFDeEI7QUFDRjtBQUFDO0FBQUFOLGNBQUEsR0FBQVEsQ0FBQTtBQUVELE1BQU1DLFdBQVcsR0FBR0EsQ0FBQ0MsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsQ0FBQyxlQUFlO0VBQUE7RUFBQVosY0FBQSxHQUFBTyxDQUFBO0VBQ2hEO0VBQ0EsTUFBTTtJQUFFRixVQUFVO0lBQUE7SUFBQSxDQUFBTCxjQUFBLEdBQUFhLENBQUEsVUFBRyxHQUFHO0lBQUVQO0VBQVEsQ0FBQztFQUFBO0VBQUEsQ0FBQU4sY0FBQSxHQUFBUSxDQUFBLE9BQUdFLEdBQUc7RUFBQztFQUFBVixjQUFBLEdBQUFRLENBQUE7RUFDMUNJLEdBQUcsQ0FBQ0UsTUFBTSxDQUFDVCxVQUFVLENBQUMsQ0FBQ1UsSUFBSSxDQUFDO0lBQzFCRCxNQUFNLEVBQUUsT0FBTztJQUNmVCxVQUFVO0lBQ1ZDO0VBQ0YsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVNKLFlBQVksRUFBRU8sV0FBVyJ9